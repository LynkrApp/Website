generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  name             String?
  handle           String?    @unique
  bio              String?
  image            String?
  email            String?    @unique
  emailVerified    DateTime?
  totalViews       Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  linksLocation    String?    @default("top")
  themePalette     Json?
  buttonStyle      String     @default("rounded-md")
  typographyTheme  Json?
  layoutTheme      Json?
  buttonStyleTheme Json?
  ogStyles         Json?
  accounts         Account[]
  links            Link[]
  pageViews        PageView[]
  sections         Section[]

  @@unique([handle, email])
}

model Section {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0)
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  links     Link[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Link {
  id          String      @id @default(cuid())
  title       String
  url         String
  archived    Boolean     @default(false)
  order       Int?        @default(0)
  isSocial    Boolean     @default(false)
  showFavicon Boolean     @default(true)
  clicks      Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  sectionId   String?
  section     Section?    @relation(fields: [sectionId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkClicks  LinkClick[]

  @@index([userId])
  @@index([sectionId])
}

model LinkingToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  provider  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model PageView {
  id        String   @id @default(cuid())
  userId    String
  timestamp DateTime @default(now())
  referer   String?
  userAgent String?
  ipAddress String?
  country   String?
  device    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "PageView_userId_fkey")
}

model LinkClick {
  id        String   @id @default(cuid())
  linkId    String
  timestamp DateTime @default(now())
  referer   String?
  userAgent String?
  ipAddress String?
  country   String?
  device    String?
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId], map: "LinkClick_linkId_fkey")
}
